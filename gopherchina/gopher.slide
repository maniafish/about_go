Gopher China Introduction
BlockChain & Microservice
10:42 19 Jul 2018
Tags: golang, block chain, micro service

fengzhide


* Introduction

- 2018 GopherChina
- about go
- go tools introduction


* 2018GopherChina 简介

- 区块链 (接近一半的topic)
- 微服务 
- 容器 
- go语言生态 
    
* Why GO

- 全面简单
    25 key words

    代码简洁

- 正交组合
    interface与实现无实际关联

    垂直&水平组合

- 偏好并发
    goroutine + channel

* 区块链

* 什么是区块链

- wiki

    区块链是用分布式数据库识别、传播和记载信息的智能化对等网络，也称为价值互联网

- 区块链技术 != bitcoin，bitcoin只是区块链技术的一个应用

    区块链不是泡沫，但是今天的比特币可能是泡沫，区块链不是金矿，
    区块链是打开数字金融的一个金矿的巨大的工具和应用，是一个数据时代，隐私和安全的解决方案。 
                                                -- 马云

* 区块链的特征

- 去中心化
- 防篡改分布式数据库
- 加密安全性，强规则
- 共识机制，信任来源于规则    

- 关键技术
    1. hash sha256
    2. merkle tree
    3. 非对称加密


* 区块链项目的组成架构

# TODO
.image image/blockchain_architecture.jpg


* 数据形式

.image image/blockchain_data.png

    1. 区块链（prev hash + merkle root + timestamp + nonce）
    2. 账本数据存储

* Merkle Tree

# TODO
.image image/blockchain_data.jpg


* 共识机制

- 共识机制解决的问题 （类似分布式系统下的paxos算法，通过奖励来维持安全性）
    1. 一致性
    2. 正确性
    3. 可结束性

- 目前主流的共识机制
    1. pow（工作量证明及最长链机制）
    2. pos/dpos（股份授权证明机制）


* pow（工作量证明制）

- 应用：比特币

- 工作量证明函数（挖矿算法）

    prev hash: 上一个区块的hash值
    merkle root: 当前交易树的根hash值
    ts: 当前时间戳
    nonce: 随机数

    blockchain = prev hash + merkle root + ts   // 组成当前区块链信息
    for:
        nonce = rand()                              // 产生随机数
        hashcode = SHA256( blockchain + nonce )     // 进行sha256运算
        pattern = "^0{6}"                           // 匹配前6位都是0
        b = pattern.match( hashcode )               // 检查结果是否匹配
        if b == true: 
            succ

    nonce 为工作量证明，矿工挖矿大部分算力就是进行这个


* pow（工作量证明制）

- pow过程

    1. 生成铸币交易，生成Merkle树，获取其根哈希
    2. 组装区块头blockchain
    3. 根据工作量证明函数，不断进行nonce的哈希碰撞

- 难度值

    通过控制pattern来控制难度值，一般按时间来提升难度值

- 共识

    1. 符合工作量证明函数
    2. 区块包含的所有交易都合法
    3. 最长链


* dpos （股份授权证明机制）

- pow缺点

    前提是算力均匀
    算力浪费，哈希碰撞除了防篡改，是无意义的

- pos （to be improve）

    难度不按时间来提升，而是与交易币龄成反比（首富账户有可能支配记账权）
    随机下个区块选择（洗牌算法得出一个固定的出块代理）


* dpos （股份授权证明机制）

- 见证人

    1. 见证人可以生产区块
    2. 每个持股的人都可以投票选举见证人，由公民民主共识
    3. 见证人个数满足：至少一半的参与投票者相信N已经充分去中心化了
    4. 另一种方式是竞选，通过交易费用、区块大小等条件参与

- bft机制

    每次代理出块需要2/3通过
    降低分叉可能性，网络封区后主动同步出块节点


* 智能合约

- wiki
    智能合约是一种旨在以信息化方式传播、验证或执行合同的计算机协议
- 其实就是一段代码，典型：Solidity，包括了：
    1. 执行（执行交易）
    2. 验证（验证收到的交易，防篡改）
- 区块链是记录这段代码的执行过程和结果

- 共识机制&智能合约
    共识机制的作用：验证区块(链)是否有效
    智能合约：执行（交易）/ 验证（交易）


* 智能合约

- 合约执行（交易为例）
    1. 区块链上的用户进行交易
    2. 调用智能合约接口验证交易
    3. 验证成功后发布到其他节点

- 智能合约防篡改
    1. 为了确保智能合约不被恶意破坏，每次交易会收取一定手续费（按照交易笔数、交易数据的字节数收取费用）
    2. 用户通过私钥自证身份，调用合约


* IPFS (InterPlanetary File System，星际文件系统)

- 号称打造下一代互联网

- 去中心化的文件存储方案（不能算是区块链项目）

- aims to replace HTTP and build a better web for us


* IPFS (InterPlanetary File System)

- 网络 Network -- p2p

- 快速寻址route -- Kademlia DHT

- 数据交换exchange
    1. 交换have_list和want_list    
    2. 获取数据：产生站务；发送数据：偿还债务（避免‘自私’节点）    
    3. 节点间交换账本防止恶意节点    

- 数据存储fs -- merkle tree
    1. 每个节点都存储信息，但最大256k
    2. 根据hash可以找到文件的其他节点位置
    3. merkle tree可以防篡改
    4. 重复内容只会存1份（类似git的hash原理）
    5. 类似git，支持version地存储


* golang & blockchain

.link https://github.com/ethereum ethereum
.link https://github.com/ipfs ipfs
.link https://github.com/hyperledger/fabric fabric

- 开发高效 （vs c++）
- 压榨单台机器的最高性能 （vs java/python）
- 系统调用能力极强 （pkg/syscall）


* 区块链目前存在的问题

- 分叉 (主要是通过共识机制来解决)
    1. 软分叉，新节点会拒绝某些交易记账，旧节点认可，当新节点占多数时，区块按照新规则，旧节点由于算力少小，短链被抛弃。软分叉不会产生永久性分叉
    2. 硬分叉，新区块只有新节点认可，旧节点不会认为新区块合法，因此会产生两条链
- 处理速度有上限    
    压榨单台机器的最高性能，但不是分布式集群
- 51%算力问题    
    达到51%算力，就有可能修改账本、阻止别人挖矿
- 匿名性问题   
    无法真正的匿名、ip地址


* 微服务

* 异常定位 -> 日志规范化（opentracing）

- 微服务太多的时候，日志定位需要大量人力

.image image/didi_log.png 

    DLTag          -> 标记日志的功能（sauth/notify）
    TraceId/SpanId -> 跨进程requestid    
    
    
* 线上全链路压测
    
.image image/didi_prof_testing.png
    
    
* 线上全链路压测

- 找到链路问题、系统瓶颈，进行服务迁移

- 操作步骤
    1. 流量标识，对压测流量 req header 添加 hitcode
    2. 快cache+影子表
    3. 写agent模拟操作，系统黑盒（非函数式状态，司机、乘客、天气等）
    
- 成本高，全链路修改 

- 风险高，线上事故  
    评估线上压力，适度压测
    
    
* 服务迁移

- 业务无感知

.image image/didi_api_1.png


* 服务迁移

- step.1

.image image/didi_api_2.png
 

* 服务迁移

- step.2

.image image/didi_api_3.png
 

* 服务迁移

- step.3

.image image/didi_api_4.png
